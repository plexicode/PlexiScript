struct ImageResource {
    string path;
    int width;
    int height;
    bool isJpeg;
    int x;
    int y;
    object loadedImageData;
    Array<int> fileBytesOriginal;
}
int PUBLIC_ImageResource_getX(object img) { return ((ImageResource)img).x; }
int PUBLIC_ImageResource_getY(object img) { return ((ImageResource)img).y; }
object PUBLIC_ImageResource_getOriginalImage(object img) { return ((ImageResource)img).loadedImageData; }
Array<int> PUBLIC_ImageResource_getOriginalBytes(object img) { return ((ImageResource)img).fileBytesOriginal; }

struct ImageAtlas {
    List<ImageResource> images;
    bool isJpeg;
    Dictionary<string, int> imagePathToIndex;
    int width;
    int height;
    Array<int> bytes;
}
int PUBLIC_ImageAtlas_getWidth(object a) { return ((ImageAtlas)a).width; }
int PUBLIC_ImageAtlas_getHeight(object a) { return ((ImageAtlas)a).height; }
bool PUBLIC_ImageAtlas_isJpeg(object a) { return ((ImageAtlas)a).isJpeg; }
List<object> PUBLIC_ImageAtlas_getImages(object a) {
    List<object> o = new List<object>();
    List<ImageResource> images = ((ImageAtlas)a).images;
    // TODO: this appears to be a Pastel bug.
    for (int i = 0; i < images.Size(); i += 1) o.Add((object)images[i]);
    return o;
}
void PUBLIC_ImageAtlas_setBytes(object a, Array<int> bytes) {
    ((ImageAtlas)a).bytes = bytes;
}

struct ImageManifest {
    Array<ImageAtlas> atlases;
}
List<object> PUBLIC_ImageManifest_getAtlases(object m) {
    List<object> output = new List<object>();
    Array<ImageAtlas> atlases = ((ImageManifest)m).atlases;
    for (int i = 0; i < atlases.Size(); i += 1) {
        output.Add((object)atlases[i]); // Pastel bug
    }
    return output;
}

string PUBLIC_getImageType(string path) {
    Array<string> parts = path.Split(".");
    if (parts.Size() == 1) return null;
    string ext = parts[parts.Size() - 1];
    ext = ext.ToUpper();
    if (ext == "PNG" || ext == "JPEG") return ext;
    if (ext == "JPG") return "JPEG";
    return null;
}

object PUBLIC_ImageResourceOf(string path, int width, int height, bool isJpeg, object loadedImageData, Array<int> origBytes) {
    return new ImageResource(path, width, height, isJpeg, -1, -1, loadedImageData, origBytes);
}

Array<int> generateImagePayloadForBundle(ImageManifest manifest) {
    List<int> output = new List<int>();
    pushArrayIntToList(output, serializeImageManifest(manifest).ToUtf8Bytes());
    output.Add(0);
    for (int i = 0; i < manifest.atlases.Size(); i += 1) {
        Array<int> atlasBytes = manifest.atlases[i].bytes;
        int sz = atlasBytes.Size();
        pushArrayIntToList(output, integerToBigEndian4(sz));
        pushArrayIntToList(output, atlasBytes);
    }
    return Core.ListToArray(output);
}

/*
    A <-- proceed to next atlas
    F:{dir name} <-- push a directory name or file name, including module ID as if a root path
    P <-- pop directory name
    I:x:y:w:h <-- an image at the current file pointer and pop the file stack
    B <-- Just like I but the whole atlas bytes are as-is for this file, e.g. JPEG files or massive images
*/
string serializeImageManifest(ImageManifest imageManifest) {
    List<string> rows = new List<string>();
    for (int i = 0; i < imageManifest.atlases.Size(); i += 1) {
        ImageAtlas atlas = imageManifest.atlases[i];
        serializeImageAtlas(rows, atlas);
    }
    return rows.Join("\n");
}

void serializeImageAtlas(List<string> rows, ImageAtlas atlas) {
    rows.Add("A");
    Array<string> paths = atlas.imagePathToIndex.Keys();
    paths = Core.SortedCopyOfStringArray(paths);
    List<string> activePath = new List<string>();
    for (int i = 0; i < paths.Size(); i += 1) {
        string path = paths[i];
        Array<string> pathParts = path.Split("/");
        int matchSize = 0;
        int maxPossibleMatchSize = pathParts.Size();
        if (activePath.Size() < maxPossibleMatchSize) maxPossibleMatchSize = activePath.Size();
        for (int j = 0; j < maxPossibleMatchSize; j += 1) {
            if (activePath[j] != pathParts[j]) {
                j += maxPossibleMatchSize;
            } else {
                matchSize += 1;
            }
        }
        if (matchSize == pathParts.Size()) {
            ImageResource img = atlas.images[atlas.imagePathToIndex[path]];
            if (img.isJpeg) {
                rows.Add("B");
            } else {
                rows.Add("I:" + Core.IntToString(img.x) + ":" + Core.IntToString(img.y) + ":" + Core.IntToString(img.width) + ":" + Core.IntToString(img.height));
            }
            activePath.Pop();
        } else if (activePath.Size() > matchSize) {
            activePath.Pop();
            rows.Add("P");
            i -= 1;
        } else if (pathParts.Size() > matchSize) {
            string pushPathPart = pathParts[matchSize];
            activePath.Add(pushPathPart);
            rows.Add("F:" + pushPathPart);
            i -= 1;
        } else {
            // This will not happen
        }
    }
}

object PUBLIC_generateImageManifest(Array<object> imageResourceObjs) {
    int i = 0;
    int j = 0;
    ImageResource img = null;

    int imageCount = imageResourceObjs.Size();
    Dictionary<string, ImageResource> imageByPath = new Dictionary<string, ImageResource>();
    List<ImageResource> allImages = new List<ImageResource>();

    for (i = 0; i < imageResourceObjs.Size(); i += 1) {
        img = (ImageResource) imageResourceObjs[i];
        allImages.Add(img);
        imageByPath[img.path] = img;
    }
    Array<string> sortedImagePaths = Core.SortedCopyOfStringArray(imageByPath.Keys());

    List<ImageAtlas> atlases = new List<ImageAtlas>();
    List<ImageResource> smallImages = new List<ImageResource>();
    List<ImageResource> tallImages = new List<ImageResource>();
    List<ImageResource> wideImages = new List<ImageResource>();
    for (i = 0; i < imageCount; i += 1) {
        img = imageByPath[sortedImagePaths[i]];
        bool isBig = false;
        if (img.isJpeg ||
            img.width * img.height > 2000000 ||
            img.width > 2500 ||
            img.height > 2500) {

            atlases.Add(createSolitaryAtlas(img));
        } else if ((img.width > 600 && img.height < 300) || img.width > 1200) {
            wideImages.Add(img);
        } else if ((img.height > 600 && img.width < 300) || img.height > 1200) {
            tallImages.Add(img);
        } else {
            smallImages.Add(img);
        }
    }

    rectanglePacker_packImagesStacked(tallImages, atlases, false);
    rectanglePacker_packImagesStacked(wideImages, atlases, true);
    rectanglePacker_packImages(smallImages, atlases);

    for (i = 0; i < atlases.Size(); i += 1) {
        ImageAtlas_computeSize(atlases[i]);
    }

    // TODO: check if the last atlas is a silly-small size and then combine with
    // a previous atlas that has capacity and is not standalone.

    return new ImageManifest(Core.ListToArray(atlases));
}

ImageAtlas createSolitaryAtlas(ImageResource img) {
    List<ImageResource> resources = new List<ImageResource>();
    resources.Add(img);
    img.x = 0;
    img.y = 0;
    Dictionary<string, int> lookup = new Dictionary<string, int>();
    lookup[img.path] = 0;
    return new ImageAtlas(resources, img.isJpeg, lookup, img.width, img.height, null);
}

void rectanglePacker_packImagesStacked(List<ImageResource> images, List<ImageAtlas> atlasesOut, bool isVerticalStack) {
    int offset = 0;
    while (offset < images.Size()) {
        int currentStackSizePixels = 0;
        bool keepTrying = true;
        ImageAtlas activeAtlas = new ImageAtlas(new List<ImageResource>(), false, new Dictionary<string, int>(), 0, 0, null);
        atlasesOut.Add(activeAtlas);
        while (keepTrying) {
            ImageResource img = images[offset];
            int imagePixelSize = img.width;
            if (isVerticalStack) imagePixelSize = img.height;

            if (activeAtlas.images.Size() == 0 || currentStackSizePixels + imagePixelSize <= 3000) {
                activeAtlas.imagePathToIndex[img.path] = activeAtlas.images.Size();
                activeAtlas.images.Add(img);
                img.x = 0;
                img.y = 0;
                if (isVerticalStack) {
                    img.y = currentStackSizePixels;
                } else {
                    img.x = currentStackSizePixels;
                }
                currentStackSizePixels += imagePixelSize;
                offset += 1;
            } else {
                keepTrying = false;
            }
        }
    }
}

void ImageAtlas_computeSize(ImageAtlas atlas) {
    int width = 0;
    int height = 0;
    List<ImageResource> images = atlas.images;
    int sz = images.Size();
    for (int i = 0; i < sz; i += 1) {
        ImageResource img = images[i];
        int right = img.x + img.width;
        int bottom = img.y + img.height;
        if (right > width) width = right;
        if (bottom > height) height = bottom;
    }
    atlas.width = width;
    atlas.height = height;
}

void rectanglePacker_packImages(List<ImageResource> images, List<ImageAtlas> atlases) {
    int startIndex = 0;
    while (startIndex < images.Size()) {
        ImageAtlas atlas = rectanglePacker_packNextAtlas(startIndex, images);
        atlas.imagePathToIndex = new Dictionary<string, int>();
        int imageCount = atlas.images.Size();
        for (int i = 0; i < imageCount; i += 1) {
            ImageResource img = atlas.images[i];
            atlas.imagePathToIndex[img.path] = i;
        }
        startIndex += imageCount;
        atlases.Add(atlas);
    }
}

ImageAtlas rectanglePacker_packNextAtlas(int startIndex, List<ImageResource> images) {
    int maxCount = images.Size() - startIndex;
    int minCount = 1;
    int currentAttemptCount = 32;
    if (currentAttemptCount > maxCount) currentAttemptCount = maxCount;

    ImageAtlas minCountAtlas = null;
    while (maxCount > minCount) {
        ImageAtlas activeAttempt = rectanglePacker_tryPackAtlas(startIndex, currentAttemptCount, images);
        if (activeAttempt == null) {
            maxCount = currentAttemptCount - 1;
        } else {
            minCount = currentAttemptCount;
            minCountAtlas = activeAttempt;
        }

        currentAttemptCount = (minCount + maxCount) >> 1;
        if (currentAttemptCount == minCount) currentAttemptCount = minCount + 1;
    }
    if (maxCount == minCount && minCountAtlas != null) return minCountAtlas;
    // If the minCount was never attempted, that only occurs when minCount is 1.
    return createSolitaryAtlas(images[startIndex]);
}

ImageAtlas rectanglePacker_tryPackAtlas(int startIndex, int imageCount, List<ImageResource> images) {
    ImageAtlas atlas = new ImageAtlas(new List<ImageResource>(), false, null, -1, -1, null);
    Dictionary<int, List<ImageResource>> resourcesByHeight = new Dictionary<int, List<ImageResource>>();
    int i = 0;
    int j = 0;
    ImageResource img = null;
    for (i = 0; i < imageCount; i += 1) {
        img = images[i + startIndex];
        atlas.images.Add(img);
        if (!resourcesByHeight.Contains(img.y)) resourcesByHeight[img.y] = new List<ImageResource>();
        resourcesByHeight[img.y].Add(img);
    }
    Array<int> ySizes = Core.SortedCopyOfIntArray(resourcesByHeight.Keys());
    List<ImageResource> imagesSortedByHeight = new List<ImageResource>();
    for (i = 0; i < ySizes.Size(); i += 1) {
        List<ImageResource> imagesOfHeight = resourcesByHeight[ySizes[i]];
        for (j = 0; j < imagesOfHeight.Size(); j += 1) {
            imagesSortedByHeight.Add(imagesOfHeight[j]);
        }
    }

    int imagesLength = imageCount;
    i = 0;
    int currentX = 0;
    int currentY = 0;
    int rowBottom = 0;

    while (i < imagesLength) {
        img = imagesSortedByHeight[i];
        img.x = currentX;
        img.y = currentY;
        int right = currentX + img.width;
        if (right > 3000) {
            // TODO: try to pop from the end
            currentX = 0;
            currentY = rowBottom;
            rowBottom += img.height;
            if (rowBottom > 3000) {
                // cannot accomodate
                return null;
            }
        } else {
            i += 1;
            currentX = right;
        }
    }

    return atlas;
}
